// Class automatically generated by Dev-C++ New Class wizard and modified by me

#ifndef SD_ARGSORT_H
#define SD_ARGSORT_H


#include <algorithm>
#include <vector>

#define irand(N) (rand() % (N))

extern int* _argsort_id;
extern void* _argsort_ptr;

template <typename KeyType>
bool _argsort_cmp( int a, int b )
{
	return ((KeyType *)_argsort_ptr)[a] < ((KeyType *)_argsort_ptr)[b];
}

template <typename KeyType>
void argsort( int len, KeyType* A, int* id )
{
	int i;
	_argsort_ptr = (void *)A;
	for( i = 0; i < len; ++i ) id[i] = i;
	std::sort(id,id+len,_argsort_cmp<KeyType>);
}

// Find the min and max value in a continugous array 'A' of 'len' elements
// minmax[0] = min value, minmax[1] = max value, run in O(n*1.5)
template <typename KeyType>
void minmax( int len, KeyType *A, KeyType *minmax )
{
    if(len <= 0) return;
    minmax[0] = minmax[1] = A[0];
    if(len&1) { ++A; --len; }
    while((len -= 2) >= 0)
    {
        if(A[0] <= A[1])
        {
            if(A[0] < minmax[0]) minmax[0] = A[0];
            if(A[1] > minmax[1]) minmax[1] = A[1];
        }
        else
        {
            if(A[1] < minmax[0]) minmax[0] = A[1];
            if(A[0] > minmax[1]) minmax[1] = A[0];
        }
        A += 2;
    }
}

#endif
