//8dfeefaabbd7b0cdfd8f4cd371847e26 Generated File. Do not edit.
// File created by WPP compiler version 0.01-Wed Oct  4 11:12:25 2006
// on 05/19/2009 at 08:07:12 UTC from a template C:\WinDDK\6001.18002\bin\wppconfig\rev1\km-default.tpl

//
// Define anything which is needs but missing from 
// older versions of the DDK.
//
#include <evntrace.h>
#include <stddef.h>
#include <stdarg.h>
#include <wmistr.h>

#if !defined(TRACE_LEVEL_NONE)
  #define TRACE_LEVEL_NONE        0  
  #define TRACE_LEVEL_CRITICAL    1  
  #define TRACE_LEVEL_FATAL       1  
  #define TRACE_LEVEL_ERROR       2  
  #define TRACE_LEVEL_WARNING     3  
  #define TRACE_LEVEL_INFORMATION 4  
  #define TRACE_LEVEL_VERBOSE     5  
  #define TRACE_LEVEL_RESERVED6   6
  #define TRACE_LEVEL_RESERVED7   7
  #define TRACE_LEVEL_RESERVED8   8
  #define TRACE_LEVEL_RESERVED9   9
#endif
    
#if !defined(TRACE_INFORMATION_CLASS_DEFINE)
typedef enum _TRACE_INFORMATION_CLASS {
    TraceIdClass,
    TraceHandleClass,
    TraceEnableFlagsClass,
    TraceEnableLevelClass,
    GlobalLoggerHandleClass,
    EventLoggerHandleClass,
    AllLoggerHandlesClass,
    TraceHandleByNameClass
} TRACE_INFORMATION_CLASS;
  
#define TRACE_MESSAGE_SEQUENCE               1
#define TRACE_MESSAGE_GUID                   2         
#define TRACE_MESSAGE_COMPONENTID            4           
#define TRACE_MESSAGE_TIMESTAMP              8         
#define TRACE_MESSAGE_PERFORMANCE_TIMESTAMP 16  
#define TRACE_MESSAGE_SYSTEMINFO            32          

#endif // !defined(TRACE_INFORMATION_CLASS_DEFINE)


//
// Advanced tracing APIs (XP and later) will be indirectly called.
//
typedef
LONG
(*PFN_WPPQUERYTRACEINFORMATION) (
    IN  TRACE_INFORMATION_CLASS TraceInformationClass,
    OUT PVOID  TraceInformation,
    IN  ULONG  TraceInformationLength,
    OUT PULONG RequiredLength OPTIONAL,
    IN  PVOID  Buffer OPTIONAL
    );

typedef
LONG
(*PFN_WPPTRACEMESSAGE)(
    IN ULONG64  LoggerHandle,
    IN ULONG   MessageFlags,
    IN LPGUID  MessageGuid,
    IN USHORT  MessageNumber,
    IN ...
    );

// template C:\WinDDK\6001.18002\bin\wppconfig\rev1\km-header.tpl
#ifdef  WPP_THIS_FILE
// included twice
#       define  WPP_ALREADY_INCLUDED
#       undef   WPP_THIS_FILE
#endif  // #ifdef WPP_THIS_FILE

#define WPP_THIS_FILE Device_c

#ifndef WPP_ALREADY_INCLUDED

#define WPP_KERNEL_MODE 
#define WPP_THIS_FILE Device_c

#if defined(__cplusplus)
extern "C" {
#endif

typedef enum _WPP_TRACE_API_SUITE {
    WppTraceDisabledSuite,
    WppTraceWin2K,
    WppTraceWinXP,
    WppTraceTraceLH,
    WppTraceMaxSuite
} WPP_TRACE_API_SUITE;


__declspec(selectany) PFN_WPPQUERYTRACEINFORMATION  pfnWppQueryTraceInformation = NULL;
__declspec(selectany) PFN_WPPTRACEMESSAGE           pfnWppTraceMessage          = NULL;
__declspec(selectany) WPP_TRACE_API_SUITE           WPPTraceSuite = WppTraceDisabledSuite;


#if !defined(_NTRTL_)
#if !defined(_NTHAL_) 
      // fake RTL_TIME_ZONE_INFORMATION //
    typedef int RTL_TIME_ZONE_INFORMATION;
#endif
#   define _WMIKM_  
#endif
#ifndef WPP_TRACE
#define WPP_TRACE pfnWppTraceMessage
#endif


VOID
WppLoadTracingSupport(
    VOID
    );

LONG
WppTraceCallback(
    __in UCHAR MinorFunction,
    __in_opt PVOID DataPath,
    __in ULONG BufferLength,
    __inout_bcount(BufferLength) PVOID Buffer,
    __in PVOID Context,
    __out PULONG Size
    );
#if !defined(WPP_TRACE_CONTROL_NULL_GUID)
DEFINE_GUID(WPP_TRACE_CONTROL_NULL_GUID, 0x00000000L, 0x0000, 0x0000, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
#endif
#define WPP_TRACE_CONTROL(Function,Buffer,BufferSize,ReturnSize) WppTraceCallback(Function,NULL,BufferSize,Buffer,&WPP_CB[0],&ReturnSize);
    

__inline ULONG64 WppQueryLogger(__in_opt PCWSTR LoggerName)
{

    if (WppTraceWinXP == WPPTraceSuite) {

        ULONG ReturnLength ;
        LONG Status ;
        ULONG64 TraceHandle ;
        UNICODE_STRING  Buffer  ;
           
        RtlInitUnicodeString(&Buffer, LoggerName ? LoggerName : L"stdout");

        Status = pfnWppQueryTraceInformation(
                                            TraceHandleByNameClass,
                                            (PVOID)&TraceHandle,
                                            sizeof(TraceHandle),
                                            &ReturnLength,
                                            (PVOID)&Buffer
                                            );
        if (Status != STATUS_SUCCESS) {
           return (ULONG64)0 ;
        }
        
        return TraceHandle ;
    } else {
        return (ULONG64) 0 ;
    }
}

typedef LONG (*WMIENTRY_NEW)(
    __in UCHAR MinorFunction,
    __in_opt PVOID DataPath,
    __in ULONG BufferLength,
    __inout_bcount(BufferLength) PVOID Buffer,
    __in PVOID Context,
    __out PULONG Size
    );

typedef struct _WPP_TRACE_CONTROL_BLOCK
{
    WMIENTRY_NEW                        Callback;
    LPCGUID                             ControlGuid;
    struct _WPP_TRACE_CONTROL_BLOCK    *Next;
    __int64                             Logger;
    PUNICODE_STRING                     RegistryPath;
    UCHAR                               FlagsLen; 
    UCHAR                               Level; 
    USHORT                              Reserved;
    ULONG                               Flags[1];
} WPP_TRACE_CONTROL_BLOCK, *PWPP_TRACE_CONTROL_BLOCK;

VOID WppCleanupKm(__in_opt PDEVICE_OBJECT pDeviceObject);
#define WPP_CLEANUP(DrvObj) WppCleanupKm((PDEVICE_OBJECT) DrvObj)

#define WPP_IsValidSid RtlValidSid
#define WPP_GetLengthSid RtlLengthSid

//
// Callback routine to be defined by the driver, which will be called from WPP callback
// WPP will pass current valued of : GUID, Logger, Enable, Flags, and Level
// 
// To activate driver must define WPP_PRIVATE_ENABLE_CALLBACK in their code, sample below 
// #define WPP_PRIVATE_ENABLE_CALLBACK MyPrivateCallback;
//
typedef
VOID
(*PFN_WPP_PRIVATE_ENABLE_CALLBACK)(
    __in LPCGUID Guid,   
    __in __int64 Logger, 
    __in BOOLEAN Enable, 
    __in ULONG Flags,    
    __in UCHAR Level);   

#if defined(__cplusplus)
};
#endif

#endif  // #ifndef WPP_ALREADY_INCLUDED


 
#ifndef WPP_ALREADY_INCLUDED

#define WPP_EVAL(x) x
#define WPP_STR(x)  #x
#define WPP_STRINGIZE(x) WPP_STR(x)
#define WPP_GLUE(a, b)  a ## b
#define WPP_GLUE3(a, b, c)  a ## b ## c
#define WPP_GLUE4(a, b, c, d)  a ## b ## c ## d
#define WPP_XGLUE(a, b) WPP_GLUE(a, b)
#define WPP_XGLUE3(a, b, c) WPP_GLUE3(a, b, c)
#define WPP_XGLUE4(a, b, c, d) WPP_GLUE4(a, b, c, d)

// template C:\WinDDK\6001.18002\bin\wppconfig\rev1\control.tpl
//
//     Defines a set of macro that expand control model specified
//     with WPP_CONTROL_GUIDS (example shown below)
//     into an enum of trace levels and required structures that
//     contain the mask of levels, logger handle and some information
//     required for registration.
//

///////////////////////////////////////////////////////////////////////////////////
//
// #define WPP_CONTROL_GUIDS \
//     WPP_DEFINE_CONTROL_GUID(Regular,(81b20fea,73a8,4b62,95bc,354477c97a6f), \
//       WPP_DEFINE_BIT(Error)      \
//       WPP_DEFINE_BIT(Unusual)    \
//       WPP_DEFINE_BIT(Noise)      \
//    )        \
//    WPP_DEFINE_CONTROL_GUID(HiFreq,(91b20fea,73a8,4b62,95bc,354477c97a6f), \
//       WPP_DEFINE_BIT(Entry)      \
//       WPP_DEFINE_BIT(Exit)       \
//       WPP_DEFINE_BIT(ApiCalls)   \
//       WPP_DEFINE_BIT(RandomJunk) \
//       WPP_DEFINE_BIT(LovePoem)   \
//    )        

#if defined(__cplusplus)
extern "C" {
#endif

#if !defined(WPP_NO_CONTROL_GUIDS)

#if defined(WPP_DEFAULT_CONTROL_GUID)
#  if defined(WPP_CONTROL_GUIDS)
#     pragma message(__FILE__ " : error : WPP_DEFAULT_CONTROL_GUID cannot be used together with WPP_CONTROL_GUIDS")
#     stop
#  else
#     define WPP_CONTROL_GUIDS \
         WPP_DEFINE_CONTROL_GUID(Default,(WPP_DEFAULT_CONTROL_GUID), \
         WPP_DEFINE_BIT(Error)   \
         WPP_DEFINE_BIT(Unusual) \
         WPP_DEFINE_BIT(Noise)   \
      )
#  endif      
#endif

#if !defined(WPP_CONTROL_GUIDS)
#  pragma message(__FILE__ " : error : Please define control model via WPP_CONTROL_GUIDS or WPP_DEFAULT_CONTROL_GUID macros")
#  pragma message(__FILE__ " : error : don't forget to call WPP_INIT_TRACING and WPP_CLEANUP in your main, DriverEntry or DllInit")
#  pragma message(__FILE__ " : error : see tracewpp.doc for further information")
stop.
#endif
// a set of macro to convert a guid in a form x(81b20fea,73a8,4b62,95bc,354477c97a6f)
// into either a a struct or text string

#define _WPPW(x) WPP_GLUE(L, x)

#define WPP_GUID_TEXT(l,w1,w2,w3,ll) #l "-" #w1 "-" #w2 "-" #w3 "-" #ll
#define WPP_GUID_WTEXT(l,w1,w2,w3,ll) _WPPW(#l) L"-" _WPPW(#w1) L"-" _WPPW(#w2) L"-" _WPPW(#w3) L"-" _WPPW(#ll)
#define WPP_EXTRACT_BYTE(val,n) (((ULONGLONG)(0x ## val) >> (8 * n)) & 0xFF)
#define WPP_GUID_STRUCT(l,w1,w2,w3,ll) {0x ## l, 0x ## w1, 0x ## w2,\
     {WPP_EXTRACT_BYTE(w3, 1), WPP_EXTRACT_BYTE(w3, 0),\
      WPP_EXTRACT_BYTE(ll, 5), WPP_EXTRACT_BYTE(ll, 4),\
      WPP_EXTRACT_BYTE(ll, 3), WPP_EXTRACT_BYTE(ll, 2),\
      WPP_EXTRACT_BYTE(ll, 1), WPP_EXTRACT_BYTE(ll, 0)} }

#ifndef WPP_FORCEINLINE
#if !defined(WPP_OLDCC)
#define WPP_FORCEINLINE __forceinline
#else
#define WPP_FORCEINLINE __inline
#endif
#endif


// define an enum of control block names
//////
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) WPP_XGLUE(WPP_CTL_, WPP_EVAL(Name)),
enum WPP_CTL_NAMES { WPP_CONTROL_GUIDS WPP_LAST_CTL};
#undef WPP_DEFINE_CONTROL_GUID

// define control guids
//////
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) \
extern __declspec(selectany) const GUID WPP_XGLUE4(WPP_, ThisDir, _CTLGUID_, WPP_EVAL(Name)) = WPP_GUID_STRUCT Guid;
WPP_CONTROL_GUIDS
#undef WPP_DEFINE_CONTROL_GUID

// define enums of individual bits
/////
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) \
    WPP_XGLUE(WPP_BLOCK_START_, WPP_EVAL(Name)) = WPP_XGLUE(WPP_CTL_, WPP_EVAL(Name)) * 0x10000, Bits WPP_XGLUE(WPP_BLOCK_END_, WPP_EVAL(Name)), 
# define WPP_DEFINE_BIT(Name) WPP_BIT_ ## Name,
enum WPP_DEFINE_BIT_NAMES { WPP_CONTROL_GUIDS };
# undef WPP_DEFINE_BIT
#undef WPP_DEFINE_CONTROL_GUID

#define WPP_MASK(CTL)    (1 << ( ((CTL)-1) & 31 ))
#define WPP_FLAG_NO(CTL) ( (0xFFFF & ((CTL)-1) ) / 32)
#define WPP_CTRL_NO(CTL) ((CTL) >> 16)

// calculate how many DWORDs we need to get the required number of bits
// upper estimate. Sometimes will be off by one
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) | WPP_XGLUE(WPP_BLOCK_END_, WPP_EVAL(Name))
enum _WPP_FLAG_LEN_ENUM { WPP_FLAG_LEN = 1 | ((0 WPP_CONTROL_GUIDS) & 0xFFFF) / 32 };
#undef WPP_DEFINE_CONTROL_GUID

#ifndef WPP_CB
#  define WPP_CB      WPP_GLOBAL_Control
#endif
#ifndef WPP_CB_TYPE
#define WPP_CB_TYPE WPP_PROJECT_CONTROL_BLOCK
#endif

typedef union {
    WPP_TRACE_CONTROL_BLOCK Control;      
    UCHAR ReserveSpace[ sizeof(WPP_TRACE_CONTROL_BLOCK) + sizeof(ULONG) * (WPP_FLAG_LEN - 1) ];
} WPP_CB_TYPE ;

 
extern __declspec(selectany) WPP_CB_TYPE *WPP_CB = (WPP_CB_TYPE*)&WPP_CB;

#define WPP_CONTROL(CTL) (WPP_CB[WPP_CTRL_NO(CTL)].Control)

#ifndef WPP_USE_TRACE_LEVELS
// For historical reasons the use of LEVEL could imply flags, this was a bad choice but very difficult
// to undo.
#if !defined(WPP_LEVEL_LOGGER)
#  define WPP_LEVEL_LOGGER(CTL)  (WPP_CONTROL(WPP_BIT_ ## CTL).Logger), 
#endif

#if !defined(WPP_LEVEL_ENABLED)
#  define WPP_LEVEL_ENABLED(CTL) (WPP_CONTROL(WPP_BIT_ ## CTL).Flags[WPP_FLAG_NO(WPP_BIT_ ## CTL)] & WPP_MASK(WPP_BIT_ ## CTL)) 
#endif
#else  //  #ifndef WPP_USE_TRACE_LEVELS
#if !defined(WPP_LEVEL_LOGGER)
#define WPP_LEVEL_LOGGER(lvl) (WPP_CONTROL(WPP_BIT_ ## DUMMY).Logger),
#endif

#if !defined(WPP_LEVEL_ENABLED)
#define WPP_LEVEL_ENABLED(lvl) (WPP_CONTROL(WPP_BIT_ ## DUMMY).Level >= lvl)
#endif
#endif  // #ifndef WPP_USE_TRACE_LEVELS

#if !defined(WPP_FLAG_LOGGER)
#  define WPP_FLAG_LOGGER(CTL)  (WPP_CONTROL(WPP_BIT_ ## CTL).Logger), 
#endif


#if !defined(WPP_FLAG_ENABLED)
#  define WPP_FLAG_ENABLED(CTL) (WPP_CONTROL(WPP_BIT_ ## CTL).Flags[WPP_FLAG_NO(WPP_BIT_ ## CTL)] & WPP_MASK(WPP_BIT_ ## CTL)) 
#endif

#if !defined(WPP_LOGGER_ARG)
#  define WPP_LOGGER_ARG TRACEHANDLE Logger,
#endif

#if !defined(WPP_GET_LOGGER)
#  define WPP_GET_LOGGER Logger
#endif

#ifndef WPP_ENABLED
#  define WPP_ENABLED() 1
#endif
#ifndef WPP_LOGGER
#  define WPP_LOGGER() (WPP_CB[0].Control.Logger),
#endif

#endif // WPP_NO_CONTROL_GUIDS

#if defined(__cplusplus)
};
#endif

#endif  // #ifndef WPP_ALREADY_INCLUDED



#if defined(__cplusplus)
extern "C" {
#endif

#ifndef WPP_ALREADY_INCLUDED

// template C:\WinDDK\6001.18002\bin\wppconfig\rev1\tracemacro.tpl
//   expects:
//      WPP_THIS_FILE defined (see header.tpl)
//      WPP_LOGGER_ARG  defined
//      WPP_GET_LOGGER  defined
//      WPP_ENABLED() defined

#ifndef NO_CHECK_FOR_NULL_STRING
#ifndef WPP_CHECK_FOR_NULL_STRING
#define WPP_CHECK_FOR_NULL_STRING 1
#endif
#endif

#define WPP_EVAL(_value_) _value_
#define WPP_(Id) WPP_EVAL(WPP_) ## WPP_EVAL(Id) ## WPP_EVAL(_) ## WPP_EVAL(WPP_THIS_FILE) ## WPP_EVAL(__LINE__)

#if !defined(WPP_INLINE)
#define WPP_INLINE DECLSPEC_NOINLINE __inline
#endif

#else   // #ifndef WPP_ALREADY_INCLUDED

#undef WPP_LOCAL_TraceGuids

#endif  // #ifndef WPP_ALREADY_INCLUDED

#if !defined(WPP_NO_ANNOTATIONS)
#if !defined(WPP_ANSI_ANNOTATION)
# define WPP_ANNOTATE_Device_c117    __annotation(L"TMF:", L"aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", L"#typev  Device_c117 11 \"%0WdfDeviceCreate failed with Status code %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_PNP", L"{", L"status, ItemNTSTATUS -- 10" , L"}")
# define WPP_ANNOTATE_Device_c154    __annotation(L"TMF:", L"aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", L"#typev  Device_c154 12 \"%0WdfIoQueueCreate failed  %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_PNP", L"{", L"status, ItemNTSTATUS -- 10" , L"}")
# define WPP_ANNOTATE_Device_c178    __annotation(L"TMF:", L"aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", L"#typev  Device_c178 13 \"%0WdfIoQueueCreate failed 0x%10!x!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_PNP", L"{", L"status, ItemLong -- 10" , L"}")
# define WPP_ANNOTATE_Device_c190    __annotation(L"TMF:", L"aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", L"#typev  Device_c190 14 \"%0WdfDeviceConfigureRequestDispatching failed 0x%10!x!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_PNP", L"{", L"status, ItemLong -- 10" , L"}")
# define WPP_ANNOTATE_Device_c213    __annotation(L"TMF:", L"aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", L"#typev  Device_c213 15 \"%0WdfIoQueueCreate failed 0x%10!x!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_PNP", L"{", L"status, ItemLong -- 10" , L"}")
# define WPP_ANNOTATE_Device_c225    __annotation(L"TMF:", L"aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", L"#typev  Device_c225 16 \"%0WdfDeviceConfigureRequestDispatching failed 0x%10!x!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_PNP", L"{", L"status, ItemLong -- 10" , L"}")
# define WPP_ANNOTATE_Device_c253    __annotation(L"TMF:", L"aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", L"#typev  Device_c253 17 \"%0WdfIoQueueCreate failed 0x%10!x!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_PNP", L"{", L"status, ItemLong -- 10" , L"}")
# define WPP_ANNOTATE_Device_c265    __annotation(L"TMF:", L"aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", L"#typev  Device_c265 18 \"%0WdfDeviceCreateDeviceInterface failed  %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_PNP", L"{", L"status, ItemNTSTATUS -- 10" , L"}")
# define WPP_ANNOTATE_Device_c270    __annotation(L"TMF:", L"aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", L"#typev  Device_c270 19 \"%0<-- OsrFxEvtDeviceAdd\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_PNP", L"{", L"}")
# define WPP_ANNOTATE_Device_c309    __annotation(L"TMF:", L"aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", L"#typev  Device_c309 20 \"%0--> EvtDevicePrepareHardware\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_PNP", L"{", L"}")
# define WPP_ANNOTATE_Device_c329    __annotation(L"TMF:", L"aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", L"#typev  Device_c329 21 \"%0WdfUsbTargetDeviceCreate failed with Status code %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_PNP", L"{", L"status, ItemNTSTATUS -- 10" , L"}")
# define WPP_ANNOTATE_Device_c337    __annotation(L"TMF:", L"aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", L"#typev  Device_c337 22 \"%0SelectInterfaces failed 0x%10!x!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_PNP", L"{", L"status, ItemLong -- 10" , L"}")
# define WPP_ANNOTATE_Device_c352    __annotation(L"TMF:", L"aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", L"#typev  Device_c352 23 \"%0IsDeviceHighSpeed: %10!s!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_PNP", L"{", L"(deviceInfo.Traits & WDF_USB_DEVICE_TRAIT_AT_HIGH_SPEED) ? 'TRUE' : 'FALSE', ItemString -- 10" , L"}")
# define WPP_ANNOTATE_Device_c356    __annotation(L"TMF:", L"aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", L"#typev  Device_c356 24 \"%0IsDeviceSelfPowered: %10!s!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_PNP", L"{", L"(deviceInfo.Traits & WDF_USB_DEVICE_TRAIT_SELF_POWERED) ? 'TRUE' : 'FALSE', ItemString -- 10" , L"}")
# define WPP_ANNOTATE_Device_c363    __annotation(L"TMF:", L"aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", L"#typev  Device_c363 25 \"%0IsDeviceRemoteWakeable: %10!s!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_PNP", L"{", L"waitWakeEnable ? 'TRUE' : 'FALSE', ItemString -- 10" , L"}")
# define WPP_ANNOTATE_Device_c373    __annotation(L"TMF:", L"aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", L"#typev  Device_c373 26 \"%0OsrFxSetPowerPolicy failed  %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_PNP", L"{", L"status, ItemNTSTATUS -- 10" , L"}")
# define WPP_ANNOTATE_Device_c381    __annotation(L"TMF:", L"aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", L"#typev  Device_c381 27 \"%0<-- EvtDevicePrepareHardware\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_PNP", L"{", L"}")
# define WPP_ANNOTATE_Device_c431    __annotation(L"TMF:", L"aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", L"#typev  Device_c431 28 \"%0-->OsrFxEvtEvtDeviceD0Entry - coming from %10!s!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_POWER", L"{", L"DbgDevicePowerString(PreviousState), ItemString -- 10" , L"}")
# define WPP_ANNOTATE_Device_c437    __annotation(L"TMF:", L"aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", L"#typev  Device_c437 29 \"%0<--OsrFxEvtEvtDeviceD0Entry\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_POWER", L"{", L"}")
# define WPP_ANNOTATE_Device_c490    __annotation(L"TMF:", L"aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", L"#typev  Device_c490 30 \"%0-->OsrFxEvtDeviceD0Exit - moving to %10!s!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_POWER", L"{", L"DbgDevicePowerString(TargetState), ItemString -- 10" , L"}")
# define WPP_ANNOTATE_Device_c498    __annotation(L"TMF:", L"aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", L"#typev  Device_c498 31 \"%0<--OsrFxEvtDeviceD0Exit\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_POWER", L"{", L"}")
# define WPP_ANNOTATE_Device_c524    __annotation(L"TMF:", L"aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", L"#typev  Device_c524 32 \"%0WdfDeviceSetPowerPolicyS0IdlePolicy failed %10!x!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_PNP", L"{", L"status, ItemLong -- 10" , L"}")
# define WPP_ANNOTATE_Device_c536    __annotation(L"TMF:", L"aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", L"#typev  Device_c536 33 \"%0WdfDeviceAssignSxWakeSettings failed %10!x!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_PNP", L"{", L"status, ItemLong -- 10" , L"}")
# define WPP_ANNOTATE_Device_c585    __annotation(L"TMF:", L"aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", L"#typev  Device_c585 34 \"%0WdfUsbTargetDeviceSelectConfig failed %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_PNP", L"{", L"status, ItemNTSTATUS -- 10" , L"}")
# define WPP_ANNOTATE_Device_c615    __annotation(L"TMF:", L"aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", L"#typev  Device_c615 35 \"%0Interrupt Pipe is 0x%10!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_IOCTL", L"{", L"pipe, ItemPtr -- 10" , L"}")
# define WPP_ANNOTATE_Device_c622    __annotation(L"TMF:", L"aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", L"#typev  Device_c622 36 \"%0BulkInput Pipe is 0x%10!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_IOCTL", L"{", L"pipe, ItemPtr -- 10" , L"}")
# define WPP_ANNOTATE_Device_c629    __annotation(L"TMF:", L"aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", L"#typev  Device_c629 37 \"%0BulkOutput Pipe is 0x%10!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_IOCTL", L"{", L"pipe, ItemPtr -- 10" , L"}")
# define WPP_ANNOTATE_Device_c642    __annotation(L"TMF:", L"aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", L"#typev  Device_c642 38 \"%0Device is not configured properly %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_PNP", L"{", L"status, ItemNTSTATUS -- 10" , L"}")
# define WPP_ANNOTATE_Device_c79    __annotation(L"TMF:", L"aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", L"#typev  Device_c79 10 \"%0--> OsrFxEvtDeviceAdd routine\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_PNP", L"{", L"}")
#else
# define WPP_ANNOTATE_Device_c117    __annotation("TMF:", "aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", "#typev  Device_c117 11 \"%0WdfDeviceCreate failed with Status code %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_PNP", "{", "status, ItemNTSTATUS -- 10" , "}")
# define WPP_ANNOTATE_Device_c154    __annotation("TMF:", "aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", "#typev  Device_c154 12 \"%0WdfIoQueueCreate failed  %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_PNP", "{", "status, ItemNTSTATUS -- 10" , "}")
# define WPP_ANNOTATE_Device_c178    __annotation("TMF:", "aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", "#typev  Device_c178 13 \"%0WdfIoQueueCreate failed 0x%10!x!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_PNP", "{", "status, ItemLong -- 10" , "}")
# define WPP_ANNOTATE_Device_c190    __annotation("TMF:", "aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", "#typev  Device_c190 14 \"%0WdfDeviceConfigureRequestDispatching failed 0x%10!x!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_PNP", "{", "status, ItemLong -- 10" , "}")
# define WPP_ANNOTATE_Device_c213    __annotation("TMF:", "aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", "#typev  Device_c213 15 \"%0WdfIoQueueCreate failed 0x%10!x!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_PNP", "{", "status, ItemLong -- 10" , "}")
# define WPP_ANNOTATE_Device_c225    __annotation("TMF:", "aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", "#typev  Device_c225 16 \"%0WdfDeviceConfigureRequestDispatching failed 0x%10!x!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_PNP", "{", "status, ItemLong -- 10" , "}")
# define WPP_ANNOTATE_Device_c253    __annotation("TMF:", "aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", "#typev  Device_c253 17 \"%0WdfIoQueueCreate failed 0x%10!x!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_PNP", "{", "status, ItemLong -- 10" , "}")
# define WPP_ANNOTATE_Device_c265    __annotation("TMF:", "aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", "#typev  Device_c265 18 \"%0WdfDeviceCreateDeviceInterface failed  %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_PNP", "{", "status, ItemNTSTATUS -- 10" , "}")
# define WPP_ANNOTATE_Device_c270    __annotation("TMF:", "aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", "#typev  Device_c270 19 \"%0<-- OsrFxEvtDeviceAdd\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_PNP", "{", "}")
# define WPP_ANNOTATE_Device_c309    __annotation("TMF:", "aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", "#typev  Device_c309 20 \"%0--> EvtDevicePrepareHardware\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_PNP", "{", "}")
# define WPP_ANNOTATE_Device_c329    __annotation("TMF:", "aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", "#typev  Device_c329 21 \"%0WdfUsbTargetDeviceCreate failed with Status code %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_PNP", "{", "status, ItemNTSTATUS -- 10" , "}")
# define WPP_ANNOTATE_Device_c337    __annotation("TMF:", "aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", "#typev  Device_c337 22 \"%0SelectInterfaces failed 0x%10!x!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_PNP", "{", "status, ItemLong -- 10" , "}")
# define WPP_ANNOTATE_Device_c352    __annotation("TMF:", "aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", "#typev  Device_c352 23 \"%0IsDeviceHighSpeed: %10!s!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_PNP", "{", "(deviceInfo.Traits & WDF_USB_DEVICE_TRAIT_AT_HIGH_SPEED) ? 'TRUE' : 'FALSE', ItemString -- 10" , "}")
# define WPP_ANNOTATE_Device_c356    __annotation("TMF:", "aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", "#typev  Device_c356 24 \"%0IsDeviceSelfPowered: %10!s!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_PNP", "{", "(deviceInfo.Traits & WDF_USB_DEVICE_TRAIT_SELF_POWERED) ? 'TRUE' : 'FALSE', ItemString -- 10" , "}")
# define WPP_ANNOTATE_Device_c363    __annotation("TMF:", "aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", "#typev  Device_c363 25 \"%0IsDeviceRemoteWakeable: %10!s!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_PNP", "{", "waitWakeEnable ? 'TRUE' : 'FALSE', ItemString -- 10" , "}")
# define WPP_ANNOTATE_Device_c373    __annotation("TMF:", "aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", "#typev  Device_c373 26 \"%0OsrFxSetPowerPolicy failed  %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_PNP", "{", "status, ItemNTSTATUS -- 10" , "}")
# define WPP_ANNOTATE_Device_c381    __annotation("TMF:", "aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", "#typev  Device_c381 27 \"%0<-- EvtDevicePrepareHardware\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_PNP", "{", "}")
# define WPP_ANNOTATE_Device_c431    __annotation("TMF:", "aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", "#typev  Device_c431 28 \"%0-->OsrFxEvtEvtDeviceD0Entry - coming from %10!s!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_POWER", "{", "DbgDevicePowerString(PreviousState), ItemString -- 10" , "}")
# define WPP_ANNOTATE_Device_c437    __annotation("TMF:", "aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", "#typev  Device_c437 29 \"%0<--OsrFxEvtEvtDeviceD0Entry\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_POWER", "{", "}")
# define WPP_ANNOTATE_Device_c490    __annotation("TMF:", "aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", "#typev  Device_c490 30 \"%0-->OsrFxEvtDeviceD0Exit - moving to %10!s!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_POWER", "{", "DbgDevicePowerString(TargetState), ItemString -- 10" , "}")
# define WPP_ANNOTATE_Device_c498    __annotation("TMF:", "aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", "#typev  Device_c498 31 \"%0<--OsrFxEvtDeviceD0Exit\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_POWER", "{", "}")
# define WPP_ANNOTATE_Device_c524    __annotation("TMF:", "aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", "#typev  Device_c524 32 \"%0WdfDeviceSetPowerPolicyS0IdlePolicy failed %10!x!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_PNP", "{", "status, ItemLong -- 10" , "}")
# define WPP_ANNOTATE_Device_c536    __annotation("TMF:", "aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", "#typev  Device_c536 33 \"%0WdfDeviceAssignSxWakeSettings failed %10!x!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_PNP", "{", "status, ItemLong -- 10" , "}")
# define WPP_ANNOTATE_Device_c585    __annotation("TMF:", "aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", "#typev  Device_c585 34 \"%0WdfUsbTargetDeviceSelectConfig failed %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_PNP", "{", "status, ItemNTSTATUS -- 10" , "}")
# define WPP_ANNOTATE_Device_c615    __annotation("TMF:", "aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", "#typev  Device_c615 35 \"%0Interrupt Pipe is 0x%10!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_IOCTL", "{", "pipe, ItemPtr -- 10" , "}")
# define WPP_ANNOTATE_Device_c622    __annotation("TMF:", "aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", "#typev  Device_c622 36 \"%0BulkInput Pipe is 0x%10!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_IOCTL", "{", "pipe, ItemPtr -- 10" , "}")
# define WPP_ANNOTATE_Device_c629    __annotation("TMF:", "aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", "#typev  Device_c629 37 \"%0BulkOutput Pipe is 0x%10!p!\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_IOCTL", "{", "pipe, ItemPtr -- 10" , "}")
# define WPP_ANNOTATE_Device_c642    __annotation("TMF:", "aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", "#typev  Device_c642 38 \"%0Device is not configured properly %10!s!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=DBG_PNP", "{", "status, ItemNTSTATUS -- 10" , "}")
# define WPP_ANNOTATE_Device_c79    __annotation("TMF:", "aaeffe8d-d7bb-cdb0-fd8f-4cd371847e26 final // SRC=Device.c MJ= MN=", "#typev  Device_c79 10 \"%0--> OsrFxEvtDeviceAdd routine\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=DBG_PNP", "{", "}")
#endif
# define WPP_ANNOTATE(x) WPP_ANNOTATE_ ## x,
#else
# define WPP_ANNOTATE(x)
#endif

#define WPP_LOCAL_TraceGuids WPP_Device_c_Traceguids

#if 1
static const GUID WPP_LOCAL_TraceGuids[] = { {0xaaeffe8d,0xd7bb,0xcdb0,{0xfd,0x8f,0x4c,0xd3,0x71,0x84,0x7e,0x26}}, };
#endif

#ifndef WPP_ALREADY_INCLUDED

#if !defined(WPP_TRACE_OPTIONS)
enum {WPP_TRACE_OPTIONS = TRACE_MESSAGE_SEQUENCE   | TRACE_MESSAGE_GUID
                        | TRACE_MESSAGE_SYSTEMINFO | TRACE_MESSAGE_TIMESTAMP };
#endif

#if !defined(WPP_LOGPAIR)
# define WPP_LOGPAIR(_Size, _Addr)     (_Addr),((SIZE_T)_Size),
#endif

#define WPP_LOGTYPEVAL(_Type, _Value) WPP_LOGPAIR(sizeof(_Type), &(_Value))
#define WPP_LOGTYPEPTR(_Value)        WPP_LOGPAIR(sizeof(*(_Value)), (_Value))

// Marshalling macros.

#if !defined(WPP_LOGASTR)
# if !defined(WPP_CHECK_FOR_NULL_STRING)
#  define WPP_LOGASTR(_value)  WPP_LOGPAIR(strlen(_value) + 1, _value )
# else
#  define WPP_LOGASTR(_value)  WPP_LOGPAIR( (_value)?strlen(_value) + 1:5, (_value)?(_value):"NULL" )
# endif
#endif

#if !defined(WPP_LOGWSTR)
# if !defined(WPP_CHECK_FOR_NULL_STRING)
#  define WPP_LOGWSTR(_value)  WPP_LOGPAIR( (wcslen(_value)+1) * sizeof(WCHAR), _value)
# else
#  define WPP_LOGWSTR(_value)  WPP_LOGPAIR( (_value)?(((_value)[0] == 0)?7 * sizeof(WCHAR):(wcslen(_value) + 1)* sizeof(WCHAR)):5 * sizeof(WCHAR), (_value)?(((_value)[0] == 0) ? L"<NULL>" : (_value)):L"NULL")
# endif
#endif

#if !defined(WPP_LOGPGUID)
# define WPP_LOGPGUID(_value) WPP_LOGPAIR( sizeof(GUID), (_value) )
#endif


#if !defined(WPP_LOGPSID)
# if !defined(WPP_CHECK_FOR_NULL_STRING)
# define WPP_LOGPSID(_value)  WPP_LOGPAIR( WPP_GetLengthSid(_value), (_value) )
# else
# define WPP_LOGPSID(_value)  WPP_LOGPAIR( (_value)? (WPP_IsValidSid(_value)? \
                                                                        WPP_GetLengthSid(_value):5):5, \
                                                                        (_value)? (WPP_IsValidSid(_value)?\
                                                                        (_value):"NULL"):"NULL")
#endif
#endif

#if !defined(WPP_LOGCSTR)
# define WPP_LOGCSTR(_x) \
    WPP_LOGPAIR( sizeof((_x).Length), &(_x).Length ) WPP_LOGPAIR( (_x).Length, (_x).Buffer )
#endif

#if !defined(WPP_LOGUSTR)
# define WPP_LOGUSTR(_x) \
    WPP_LOGPAIR( sizeof((_x).Length), &(_x).Length ) WPP_LOGPAIR( (_x).Length, (_x).Buffer )
#endif

#if !defined(WPP_LOGPUSTR)
#if !defined(WPP_CHECK_FOR_NULL_STRING)
# define WPP_LOGPUSTR(_x) WPP_LOGUSTR(*(_x))
#else
# define WPP_LOGPUSTR(_x) WPP_LOGPAIR( sizeof(USHORT), (_x && (*(_x)).Length)? &(*(_x)).Length : L"\5")\
                          WPP_LOGPAIR( (_x && (*(_x)).Buffer)?(*(_x)).Length:5*sizeof(WCHAR), (_x && (*(_x)).Buffer)?(*(_x)).Buffer:L"NULL")
#endif
#endif

#if !defined(WPP_LOGPCSTR)
#if !defined(WPP_CHECK_FOR_NULL_STRING)
# define WPP_LOGPCSTR(_x) WPP_LOGCSTR(*(_x))
#else
# define WPP_LOGPCSTR(_x) WPP_LOGPAIR( sizeof(USHORT), (_x && (*(_x)).Length)? &(*(_x)).Length : L"\5")\
                          WPP_LOGPAIR( (_x && (*(_x)).Buffer)?(*(_x)).Length:5*sizeof(char), (_x && (*(_x)).Buffer)?((const char *)(*(_x)).Buffer):"NULL")
#endif
#endif

#if !defined(WPP_LOGSTDSTR)
#define WPP_LOGSTDSTR(_value)  WPP_LOGPAIR( (_value).size()+1, (_value).c_str() )
#endif

#endif  //  #ifndef WPP_ALREADY_INCLUDED


#ifndef WPP_SF__def
#       define WPP_SF__def
WPP_INLINE void WPP_SF_(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id,  0); }
#endif  // #ifndef WPP_SF__def
#ifndef WPP_SF_D_def
#       define WPP_SF_D_def
WPP_INLINE void WPP_SF_D(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, unsigned int _a1)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(unsigned int,_a1)  0); }
#endif  // #ifndef WPP_SF_D_def
#ifndef WPP_SF_d_def
#       define WPP_SF_d_def
WPP_INLINE void WPP_SF_d(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, signed int _a1)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(signed int,_a1)  0); }
#endif  // #ifndef WPP_SF_d_def
#ifndef WPP_SF_q_def
#       define WPP_SF_q_def
WPP_INLINE void WPP_SF_q(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const void* _a1)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGTYPEVAL(const void*,_a1)  0); }
#endif  // #ifndef WPP_SF_q_def
#ifndef WPP_SF_s_def
#       define WPP_SF_s_def
WPP_INLINE void WPP_SF_s(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, const char* _a1)
   { WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1)  0); }
#endif  // #ifndef WPP_SF_s_def
#ifndef WPP_POST
#  define WPP_POST()
#endif

#ifndef WPP_PRE
#  define WPP_PRE()
#endif


#ifdef WPP_DEBUG
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c117(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c117) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_d(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 11, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c154(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c154) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_d(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 12, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c178(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c178) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_D(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 13, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c190(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c190) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_D(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 14, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c213(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c213) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_D(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 15, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c225(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c225) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_D(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 16, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c253(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c253) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_D(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 17, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c265(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c265) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_d(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 18, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c270(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c270) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 19, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c309(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c309) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 20, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c329(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c329) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_d(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 21, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c337(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c337) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_D(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 22, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c352(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c352) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_s(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 23, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c356(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c356) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_s(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 24, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c363(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c363) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_s(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 25, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c373(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c373) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_d(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 26, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c381(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c381) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 27, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c431(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c431) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_s(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 28, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c437(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c437) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 29, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c490(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c490) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_s(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 30, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c498(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c498) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 31, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c524(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c524) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_D(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 32, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c536(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c536) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_D(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 33, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c585(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c585) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_d(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 34, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c615(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c615) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 35, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c622(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c622) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 36, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c629(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c629) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 37, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c642(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c642) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG,a10)), \
          WPP_SF_d(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 38, \
                             WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c79(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c79) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
          WPP_DEBUG((MSG)), \
          WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 10, \
                             WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c117(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c117) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_d(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 11, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c154(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c154) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_d(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 12, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c178(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c178) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_D(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 13, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c190(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c190) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_D(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 14, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c213(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c213) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_D(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 15, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c225(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c225) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_D(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 16, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c253(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c253) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_D(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 17, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c265(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c265) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_d(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 18, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c270(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c270) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 19, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c309(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c309) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 20, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c329(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c329) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_d(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 21, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c337(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c337) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_D(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 22, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c352(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c352) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_s(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 23, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c356(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c356) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_s(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 24, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c363(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c363) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_s(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 25, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c373(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c373) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_d(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 26, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c381(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c381) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 27, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c431(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c431) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_s(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 28, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c437(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c437) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 29, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c490(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c490) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_s(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 30, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c498(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c498) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 31, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c524(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c524) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_D(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 32, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c536(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c536) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_D(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 33, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c585(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c585) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_d(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 34, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c615(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c615) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 35, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c622(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c622) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 36, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c629(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c629) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_q(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 37, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c642(LEVEL, FLAGS, MSG,a10) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c642) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_d(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 38, \
                               WPP_LOCAL_TraceGuids+0,a10), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#define WPP_CALL_Device_c79(LEVEL, FLAGS, MSG) \
     WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
     WPP_ANNOTATE(Device_c79) \
     ( ( \
         (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) && WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) ? \
            WPP_SF_(WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) 10, \
                               WPP_LOCAL_TraceGuids+0), 1:0  \
     ) ) \
     WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif


#ifdef WPP_DEBUG
#else
#endif



#if defined(__cplusplus)
};
#endif



//
// Tracing Macro name redefinition
//

// NoMsgArgs

#undef DoDebugTrace
#define DoDebugTrace WPP_(CALL)
#undef DoTraceMessage
#define DoTraceMessage WPP_(CALL)
#undef TraceEvents
#define TraceEvents WPP_(CALL)
// MsgArgs

 
